package learnSe.part1;
//1.3基本概念（Ⅱ）
//
//1.运算符   操作常量和变量的符号
//    1.分类
//        1.算术运算符 +,-,*,/,%,++,--
//            1.+ 正号,加法运算,字符串连接符
//            2./ 整数相除只能得到整数,浮点数运算得到小数
//            3.% 负数模运算先忽略符号计算，结果符号再与被模数保持一致      (-10)%3==-1;
//                    这也很好理解，因为除法运算|商*分子|<=|分母|且商尽可能的大
//            4.++和--
//                单独使用：放在操作数的前面和后面效果一样。(这种用法是我们比较常见的)
//                参与运算使用：
//                    放在操作数的前面，先自增或者自减，然后再参与运算。   ++a + b;
//                    放在操作数的后面，先参与运算，再自增或者自减。       a++ + b;
//                        int x = 4;
//                        int y = (x++)+(++x)+(x*10); //加不加括号是一样的，加了括号，也是要先参与下一步的运算，再进行++
//                        System.out.println(y);      //4 + 6 + 6*10 = 70
//                ++--运算符会做自动强转，不会出错
//                    问哪句会报错,为什么
//                    byte b = 10;
//                    b++;            //如果按b = b + 1运算，b+1的结果默认转换为int，再赋值给byte类型的b会报错，但++运算符将自增结果自动强转成了原本的byte类型
//                    b = b + 1;		//这里报错
//        2.赋值运算符 =,+=,-=,*=,/=,%=
//            1.拓展赋值运算符   +=,-=,*=,/=,%= 左右两边运算后赋值    a += b;即 a = a + b;
//                同自增自减运算符一样，会做自动强转
//                    short s=1;s=s+1;
//                    short s=1;s+=1;自动强转s=(short)(s+1)
//        3.关系运算符 ==,!=,>,>=,<,<=
//            1.注意：
//                1.无论你的操作是简单还是复杂，结果一定是boolean类型
//                2."=="不能写成"="
//        4.逻辑运算符 &,|,^,!,&&,||
//            1.逻辑运算符一般用于连接boolean类型的表达式或者值
//            2.规则：
//                &逻辑与:有false则false。
//                |逻辑或:有true则true。
//                ^逻辑异或:相同为false，不同为true。
//                !逻辑非:非false则true，非true则false。
//            3.&& || 具有短路效果
//        5.位运算符  &,|,^,~ ,>>,>>>,<<  0视为false,1视为true
//            1.位异或运算符^   一个数据对另一个数据位异或两次，该数本身不变（用来加密解密）
//            2.左右移位相当于乘除2	位运算比乘除运算更高效，对于加减差别不明显
//                最有效率的算出2 * 8的结果（2<<3）
//                <<:左移		低位补0
//                >>:右移		高位补原最高位
//                >>>:无符号右移 	高位补0
//        6.三元运算符 (关系表达式) ? 表达式1 : 表达式2;
//            对于if_else和三目运算符，针对java编译器来说，三目运算符效率要更高，因为jvm解析class文件时少一个指令
//            但针对汇编的编译器而言，if_else的指令要少两个，效率反而更高
//2.流程控制语句
//    1.顺序结构
//    2.选择结构
public class Cjibengainian {
    public static void main(String[] args) {
//        int x = 4;
//        int y = x++ + ++x + (x*10);
//        System.out.println(y);      //4 + 6 + 6*10 = 70

        int a = 2<<3;
        System.out.println(a);
    }
}
